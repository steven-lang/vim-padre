" vim: et ts=2 sts=2 sw=2

Before:
  "let g:PadrePreprocessingCommands = ['Command 1', 'Command 2']

  call padre#Enable()

After:
  sleep 100ms

  call padre#Disable()

  Restore

Execute (Check padre tab and buffer):
  let g:start_tabpagenr = tabpagenr()

  PadreDebug test/progs/test_prog

Then:
  let t:padre_buf_num = bufnr('%')

  " Check Padre buffer exists
  AssertEqual 'PADRE_Main', padre#buffer#GetBufNameForBufNum(t:padre_buf_num)

  " Check we have a new tab and it's the PADRE_Main buffer
  AssertEqual g:start_tabpagenr + 1, tabpagenr()
  AssertEqual 0, getbufvar(t:padre_buf_num, '&swapfile')
  AssertEqual 'PADRE_Main', getbufvar(t:padre_buf_num, '&filetype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&modifiable')
  AssertEqual 'nofile', getbufvar(t:padre_buf_num, '&buftype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&buflisted')

  unlet t:padre_buf_num

  quit
  quit

#Execute (Check when we run twice the same tab is open):
#  PadreDebug test/progs/test_prog
#  PadreDebug test/progs/test_prog
#
#Then:
#  AssertEqual 1, len(padre#layout#GetTabNumbersContainingBufferName('PADRE_Main'))
#  AssertEqual 2, len(padre#layout#GetBuffersInTab())
#
#  quit
#  quit
#
#Execute (Check when we run PADRE followed by the stop command we have no tab or padre process running):
#  let g:NumTabs = tabpagenr('$')
#  PadreDebug test/progs/test_prog
#  sleep 1
#  AssertEqual g:NumTabs + 1, tabpagenr('$')
#  PadreStop
#  sleep 100ms
#
#Then:
#  AssertEqual 0, padre#job#RunningJobs()
#  AssertEqual g:NumTabs, tabpagenr('$')
#
#"Execute (The preprocessing buffer displays any preprocessor commands from the config):
#"  AssertEqual g:PadrePreprocessingCommands, padre#buffer#ReadBuffer('PADRE_Preprocessing')
#
#"Execute (The preprocessing buffer displays when requested):
#"  call padre#preprocessing#CreatePreprocessingWindow()
#"
#"  wincmd b
#"
#"  AssertEqual 'PADRE_Preprocessing', &filetype
#"  AssertEqual 'PADRE_Preprocessing', padre#buffer#GetBufNameForBufNum(bufnr('%'))
#
#Execute (Check the stdout and stderr callback functions adds to the correct buffer):
#  tabnew
#  execute 'buffer ' . padre#buffer#GetBufNumForBufName('PADRE_Stdio')
#  call padre#buffer#ClearBuffer('PADRE_Stdio')
#  call padre#debugger#StdoutCallback(12345, 'Test stdout', [])
#  call padre#debugger#StderrCallback(12345, 'Test stderr', [])
#
#Then:
#  AssertEqual ['Test stdout', 'Test stderr', ''], padre#buffer#ReadBuffer('PADRE_Stdio')
#
#  quit
#
#Execute (Check PADRE debugger starts and writes to the stdio buffer):
#  tabnew
#  execute 'buffer ' . padre#buffer#GetBufNumForBufName('PADRE_Stdio')
#
#  PadreDebug test/progs/test_prog
#
#  sleep 500ms
#
#Then:
#  AssertEqual 1, padre#job#RunningJobs()
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Stdio')[0], '^Listening on localhost:\d\+$'))
#
#  quit
#
#Execute (Check when we run twice only one PADRE debugger is running):
#  PadreDebug test/progs/test_prog
#  sleep 100ms
#  PadreDebug test/progs/test_prog
#  sleep 100ms
#
#Then:
#  AssertEqual 1, padre#job#RunningJobs()
#
#Execute (Check when we log errors and they log at the correct levels):
#  PadreDebug test/progs/test_prog
#  sleep 3
#  if has_key(g:, 'PadreLogLevel')
#    unlet g:PadreLogLevel
#  endif
#
#Then:
#  call padre#debugger#Log(1, 'Test Critical Log')
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[1], '^CRITICAL: Test Critical Log$'))
#  call padre#debugger#Log(2, 'Test Error Log')
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[2], '^ERROR: Test Error Log$'))
#  call padre#debugger#Log(3, 'Test Warn Log')
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[3], '^WARN: Test Warn Log$'))
#  call padre#debugger#Log(4, 'Test Info Log')
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[4], '^INFO: Test Info Log$'))
#  call padre#debugger#Log(5, 'Test Debug Log')
#  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6
#
#  let g:PadreLogLevel = 1
#  call padre#debugger#Log(2, 'Test Error Log')
#  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6
#
#  let g:PadreLogLevel = 2
#  call padre#debugger#Log(3, 'Test Warn Log')
#  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6
#
#  let g:PadreLogLevel = 3
#  call padre#debugger#Log(4, 'Test Info Log')
#  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6
#
#  let g:PadreLogLevel = 4
#  call padre#debugger#Log(5, 'Test Debug Log')
#  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6
#
#  let g:PadreLogLevel = 5
#  call padre#debugger#Log(5, 'Test Debug Log')
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[5], '^DEBUG: Test Debug Log$'))
#  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 7
#  quit
#
#Execute (Check we stop PADRE when we close PADRE_Main):
#  PadreDebug test/progs/test_prog
#  sleep 3
#
#  call padre#layout#FindBufferWindowWithinTab('PADRE_Main')
#  normal ZZ
#
#  sleep 1
#
#Then:
#  AssertEqual 0, padre#debugger#IsRunning()
#
#Execute (Check we can debug a simple C program):
#  tabnew
#  let g:mainFileToDebug = expand('%:p:h') . '/test/progs/test_prog.c'
#  let g:funcFileToDebug = expand('%:p:h') . '/test/progs/test_func.c'
#  execute 'edit ' . g:mainFileToDebug
#
#  call cursor(6,1)
#
#  PadreBreakpoint
#
#  quit
#
#  PadreDebug test/progs/test_prog
#  sleep 3
#
#  AssertEqual 1, padre#debugger#IsRunning()
#  AssertEqual 'INFO: PADRE debugger open', padre#buffer#ReadBuffer('PADRE_Main')[0]
#  AssertEqual 'INFO: Breakpoint set file=test_prog.c, line=6', padre#buffer#ReadBuffer('PADRE_Main')[1]
#
#  normal r
#  sleep 1
#
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[2], '^INFO: Process \d\+ Running$'))
#  AssertEqual 'INFO: Stopped file=' . g:mainFileToDebug, padre#buffer#ReadBuffer('PADRE_Main')[3] . ' line=6'
#
#  AssertEqual [bufnr(g:mainFileToDebug), padre#buffer#GetBufNumForBufName('PADRE_Main'), padre#buffer#GetBufNumForBufName('PADRE_Stdio')], padre#layout#GetBuffersInTab()
#
#  normal S
#  sleep 1
#
#  AssertEqual [bufnr(g:funcFileToDebug), padre#buffer#GetBufNumForBufName('PADRE_Main'), padre#buffer#GetBufNumForBufName('PADRE_Stdio')], padre#layout#GetBuffersInTab()
#  AssertEqual 'INFO: Stopped file=' . g:funcFileToDebug, padre#buffer#ReadBuffer('PADRE_Main')[4] . ' line=2'
#
#  normal s
#  sleep 1
#
#  AssertEqual [bufnr(g:funcFileToDebug), padre#buffer#GetBufNumForBufName('PADRE_Main'), padre#buffer#GetBufNumForBufName('PADRE_Stdio')], padre#layout#GetBuffersInTab()
#  AssertEqual 'INFO: Stopped file=' . g:funcFileToDebug, padre#buffer#ReadBuffer('PADRE_Main')[5] . ' line=3'
#
#  call cursor(3,12)
#  normal vp
#  sleep 1
#
#  AssertEqual 'INFO: Variable a=1', padre#buffer#ReadBuffer('PADRE_Main')[6]
#
#  normal C
#  sleep 3
#
#  echom len(padre#buffer#ReadBuffer('PADRE_Main'))
#  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[7], '^INFO: Process \d\+ finished with exit code=0$'))
#
#  normal ZZ
#  sleep 1
#
#  AssertEqual 0, padre#debugger#IsRunning()
#
#  quit
