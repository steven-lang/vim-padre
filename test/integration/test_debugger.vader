" vim: et ts=2 sts=2 sw=2

Before:
  "let g:PadrePreprocessingCommands = ['Command 1', 'Command 2']

  call padre#Enable()

After:
  sleep 100ms

  call padre#Disable()

  Restore

Execute (Check padre tab and buffer):
  let g:start_tabpagenr = tabpagenr()

  PadreDebug test/progs/test_prog

Then:
  let t:padre_buf_num = bufnr('%')

  " Check Padre buffer exists
  AssertEqual 'PADRE_Main', padre#buffer#GetBufNameForBufNum(t:padre_buf_num)

  " Check we have a new tab and it's the PADRE_Main buffer
  AssertEqual g:start_tabpagenr + 1, tabpagenr()
  AssertEqual 0, getbufvar(t:padre_buf_num, '&swapfile')
  AssertEqual 'PADRE_Main', getbufvar(t:padre_buf_num, '&filetype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&modifiable')
  AssertEqual 'nofile', getbufvar(t:padre_buf_num, '&buftype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&buflisted')

  unlet t:padre_buf_num

  quit
  quit!

" Probably remove this, should probably be able to run multiple
"Execute (Check when we run twice the same tab is open):
"  PadreDebug test/progs/test_prog
"  PadreDebug test/progs/test_prog
"
"Then:
"  AssertEqual 1, len(padre#layout#GetTabNumbersContainingBufferName('PADRE_Main'))
"  AssertEqual 2, len(padre#layout#GetBuffersInTab())
"
"  quit
"  quit

" TODO: Fix stop
"Execute (Check when we run PADRE followed by the stop command we have no tab or padre process running):
"  let g:NumTabs = tabpagenr('$')
"  PadreDebug test/progs/test_prog
"  sleep 1
"  AssertEqual g:NumTabs + 1, tabpagenr('$')
"  PadreStop
"  sleep 100ms
"
"Then:
"  AssertEqual 0, padre#job#RunningJobs()
"  AssertEqual g:NumTabs, tabpagenr('$')
"
"  quit!

Execute (Check when we log errors and they log at the correct levels):
  PadreDebug test/progs/test_prog
  sleep 3
  if has_key(g:, 'PadreLogLevel')
    unlet g:PadreLogLevel
  endif

Then:
  call padre#debugger#Log(1, 'Test Critical Log')
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[1], '^CRITICAL: Test Critical Log$'))
  call padre#debugger#Log(2, 'Test Error Log')
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[2], '^ERROR: Test Error Log$'))
  call padre#debugger#Log(3, 'Test Warn Log')
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[3], '^WARN: Test Warn Log$'))
  call padre#debugger#Log(4, 'Test Info Log')
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[4], '^INFO: Test Info Log$'))
  call padre#debugger#Log(5, 'Test Debug Log')
  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6

  let g:PadreLogLevel = 1
  call padre#debugger#Log(2, 'Test Error Log')
  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6

  let g:PadreLogLevel = 2
  call padre#debugger#Log(3, 'Test Warn Log')
  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6

  let g:PadreLogLevel = 3
  call padre#debugger#Log(4, 'Test Info Log')
  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6

  let g:PadreLogLevel = 4
  call padre#debugger#Log(5, 'Test Debug Log')
  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 6

  let g:PadreLogLevel = 5
  call padre#debugger#Log(5, 'Test Debug Log')
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[5], '^DEBUG: Test Debug Log$'))
  AssertEqual len(padre#buffer#ReadBuffer('PADRE_Main')), 7
  quit
  quit!

" TODO: Fix this:
"Execute (Check we stop PADRE when we close PADRE_Main):
"  PadreDebug test/progs/test_prog
"  sleep 3
"
"  call padre#layout#FindBufferWindowWithinTab('PADRE_Main')
"  normal ZZ
"
"  sleep 1
"
"Then:
"  AssertEqual 0, padre#debugger#IsRunning()

Execute (Check we can debug a simple C program):
  tabnew
  let g:mainFileToDebug = expand('%:p:h') . '/test/progs/test_prog.c'
  let g:funcFileToDebug = expand('%:p:h') . '/test/progs/test_func.c'
  execute 'edit ' . g:mainFileToDebug

  call cursor(7,1)

  PadreBreakpoint

  quit

  PadreDebug test/progs/test_prog
  sleep 5

  AssertEqual 1, padre#debugger#IsRunning()
  AssertEqual 4, len(padre#buffer#ReadBuffer('PADRE_Main'))
  AssertEqual 'INFO: PADRE debugger open', padre#buffer#ReadBuffer('PADRE_Main')[0]
  AssertEqual 'INFO: Setting breakpoint in file ' . g:mainFileToDebug . ' at line number 7', padre#buffer#ReadBuffer('PADRE_Main')[1]
  AssertEqual 'INFO: Breakpoint set file=test_prog.c, line=7', padre#buffer#ReadBuffer('PADRE_Main')[2]

  normal r
  sleep 3

  AssertEqual 8, len(padre#buffer#ReadBuffer('PADRE_Main'))
  AssertEqual 'INFO: Launching process', padre#buffer#ReadBuffer('PADRE_Main')[3]
  AssertEqual 'INFO: Breakpoint set file=test_prog.c, line=6', padre#buffer#ReadBuffer('PADRE_Main')[4]
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[5], '^INFO: Process \d\+ Running$'))
  AssertEqual 'INFO: Stopped file=' . g:mainFileToDebug . ' line=6', padre#buffer#ReadBuffer('PADRE_Main')[6]

  let t:buffers_in_tab = padre#layout#GetBuffersInTab()
  AssertEqual 0, index(t:buffers_in_tab, bufnr(g:mainFileToDebug))
  AssertEqual 1, index(t:buffers_in_tab, padre#buffer#GetBufNumForBufName('PADRE_Main'))

  normal S
  sleep 3

  AssertEqual 9, len(padre#buffer#ReadBuffer('PADRE_Main'))
  AssertEqual 'INFO: Stopped file=' . g:funcFileToDebug . ' line=2', padre#buffer#ReadBuffer('PADRE_Main')[7]

  let t:buffers_in_tab = padre#layout#GetBuffersInTab()
  AssertEqual 0, index(t:buffers_in_tab, bufnr(g:funcFileToDebug))
  AssertEqual 1, index(t:buffers_in_tab, padre#buffer#GetBufNumForBufName('PADRE_Main'))

  normal s
  sleep 3

  AssertEqual 10, len(padre#buffer#ReadBuffer('PADRE_Main'))
  AssertEqual 'INFO: Stopped file=' . g:funcFileToDebug . ' line=3', padre#buffer#ReadBuffer('PADRE_Main')[8]

  let t:buffers_in_tab = padre#layout#GetBuffersInTab()
  AssertEqual 0, index(t:buffers_in_tab, bufnr(g:funcFileToDebug))
  AssertEqual 1, index(t:buffers_in_tab, padre#buffer#GetBufNumForBufName('PADRE_Main'))

  call cursor(3,12)
  normal vp
  sleep 3

  AssertEqual 14, len(padre#buffer#ReadBuffer('PADRE_Main'))
  AssertEqual 'INFO: Variable a={', padre#buffer#ReadBuffer('PADRE_Main')[9]
  AssertEqual 'INFO:     "type": "int",', padre#buffer#ReadBuffer('PADRE_Main')[10]
  AssertEqual 'INFO:     "value": "1"', padre#buffer#ReadBuffer('PADRE_Main')[11]
  AssertEqual 'INFO: }', padre#buffer#ReadBuffer('PADRE_Main')[12]

  normal C
  sleep 3

  AssertEqual 15, len(padre#buffer#ReadBuffer('PADRE_Main'))
  AssertEqual 'INFO: Stopped file=' . g:mainFileToDebug . ' line=7', padre#buffer#ReadBuffer('PADRE_Main')[13]

  let t:buffers_in_tab = padre#layout#GetBuffersInTab()
  AssertEqual 0, index(t:buffers_in_tab, bufnr(g:mainFileToDebug))
  AssertEqual 1, index(t:buffers_in_tab, padre#buffer#GetBufNumForBufName('PADRE_Main'))

  normal C
  sleep 5

  AssertEqual 16, len(padre#buffer#ReadBuffer('PADRE_Main'))
  Assert !empty(matchstr(padre#buffer#ReadBuffer('PADRE_Main')[14], '^INFO: Process \d\+ finished with exit code=0$'))

  quit
  quit!

#Â TODO: Fix
#  AssertEqual 0, padre#debugger#IsRunning()
