Execute(Test jobs are created and output exists):
  let t:job_id = padre#job#Start('test/pythonx/test_prog.py', {})

  sleep 100ms

  AssertEqual padre#job#IsRunning(t:job_id), 1

  sleep 600ms

  AssertEqual padre#job#IsRunning(t:job_id), 0
  AssertEqual padre#job#Stdout(t:job_id), ['Test stdout vimscript jobs', 'Testing done']
  AssertEqual padre#job#Stderr(t:job_id), ['Test stderr vimscript jobs']

Execute(Test jobs can be stopped):
  let t:job_id = padre#job#Start('test/pythonx/test_prog.py', {})

  sleep 100ms

  AssertEqual padre#job#IsRunning(t:job_id), 1

  call padre#job#Stop(t:job_id)

  sleep 100ms

  AssertEqual padre#job#IsRunning(t:job_id), 0

Execute(Test multiple jobs create separate IDs):
  let t:original_job_id = padre#job#Start('/bin/true', {})

  let t:job_id = padre#job#Start('/bin/true', {})

  AssertNotEqual t:job_id, t:original_job_id

  unlet t:original_job_id

Execute(Test number of jobs running is accurate and we can stop all jobs):
  call padre#job#StopAllJobs()

  call padre#job#Start('test/pythonx/test_prog.py', {})
  call padre#job#Start('test/pythonx/test_prog.py', {})
  call padre#job#Start('test/pythonx/test_prog.py', {})

  sleep 50ms

  AssertEqual 3, padre#job#RunningJobs()

  call padre#job#StopAllJobs()

  sleep 50ms

  AssertEqual 0, padre#job#RunningJobs()
