" vim: et ts=2 sts=2 sw=2

Before:
  call padre#Enable()

  function! GetBufNameForNumber(num)
    redir => l:buffers
      silent exec 'buffers!'
    redir end

    for l:line in split(l:buffers, '\n')
      let l:match = matchlist(l:line, '^ *\([0-9]*\).*"\(.*\)".*')
      if !empty(l:match) && l:match[1] == a:num
        return l:match[2]
      endif
    endfor
  endfunction

  function! GetTabNumbersContainingWindowWithName(name)
    redir => l:tabs
      silent exec 'tabs'
    redir end

    let l:ret = []
    let l:tab_page_nr = 0

    for l:line in split(l:tabs, '\n')
      let l:match = matchlist(l:line, '^Tab page \([1-9][0-9]*\)')
      if !empty(l:match)
        let l:tab_page_nr = l:match[1]
        continue
      endif

      let l:match = matchlist(l:line, '^[ >+]*\(.*\)')
      if !empty(l:match) && l:match[1] == a:name
        call add(l:ret, l:tab_page_nr)
      endif
    endfor

    return l:ret
  endfunction

After:
  Restore

Execute (Check padre tab and buffer):
  let g:start_tabpagenr = tabpagenr()

  PadreDebug

Then:
  let t:padre_buf_num = bufnr('%')

  " Check Padre buffer exists
  AssertEqual 'PADRE', GetBufNameForNumber(t:padre_buf_num)

  " Check we have a new tab and it's the PADRE buffer
  AssertEqual g:start_tabpagenr + 1, tabpagenr()
  AssertEqual 0, getbufvar(t:padre_buf_num, '&swapfile')
  AssertEqual 'PADRE', getbufvar(t:padre_buf_num, '&filetype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&modifiable')
  AssertEqual 'nofile', getbufvar(t:padre_buf_num, '&buftype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&buflisted')

  unlet t:padre_buf_num

Execute (Check padre opens and we connect to it):
  PadreDebug

  sleep 100ms

Then:
  AssertEqual 1, padre#RunningJobs()

Execute (Check when we run two commands only one is spawned and same tab is open and clear):
  PadreDebug
  PadreDebug

Then:
  AssertEqual 1, padre#RunningJobs()
  AssertEqual 1, len(GetTabNumbersContainingWindowWithName('PADRE'))

Execute (Check when we run two commands only one is spawned and same tab is open and clear):
  1 tabnext
  PadreDebug

Then:
  AssertEqual str2nr(GetTabNumbersContainingWindowWithName('PADRE')[0]), tabpagenr()

Execute (Check when we run padre followed by the stop command we have no tab or padre process running):
  PadreDebug
  PadreStop

Then:
  AssertEqual 0, padre#RunningJobs()
  AssertEqual 0, len(GetTabNumbersContainingWindowWithName('PADRE'))
