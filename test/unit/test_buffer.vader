" vim: et ts=2 sts=2 sw=2

Before:
  call padre#python#Setup()

  let t:options = ['noswapfile', 'buftype=nofile', 'filetype=TestBuf', 'nobuflisted']
  let g:static_buffer_number = padre#buffer#Create('Test_Buffer_Static', 'TestBuf', 0)
  let g:writable_buffer_number = padre#buffer#Create('Test_Buffer', 'TestBuf', 1)
  let g:terminal_buffer_number = padre#buffer#Create('Test_Buffer_Terminal', 'TestBuf', 1)
  call padre#buffer#SetOnlyWriteableAtBottom('Test_Buffer_Terminal')

  tabnew
  execute 'buffer ' . g:writable_buffer_number

After:
  quit

  Restore

Execute (Check we can create a buffer and get the buffer name for a buffer number):
  redir => t:buffers
    silent exec 'buffers!'
  redir end

  let t:line = split(t:buffers, '\n')[ g:writable_buffer_number - 1 ]
  let t:match = matchlist(t:line, '^ *\([0-9]*\).*"Test_Buffer".*')

  AssertEqual empty(t:match), 0
  AssertEqual 'Test_Buffer', padre#buffer#GetBufNameForBufNum(t:match[1])

Execute (Check we can create a read only buffer and get the buffer name for a buffer number):
  tabnew
  execute 'buffer ' . g:static_buffer_number

  AssertEqual g:static_buffer_number, padre#buffer#GetBufNumForBufName('Test_Buffer_Static')
  AssertEqual 0, &swapfile
  AssertEqual 'nofile', &buftype
  AssertEqual 0, &modifiable
  AssertEqual 'TestBuf', &filetype
  AssertEqual 0, &buflisted

  quit

Execute (Check we can create a terminal style buffer and only write to the last line):
  call padre#buffer#ReplaceBufferList('Test_Buffer_Terminal', '1', '$', ['abc', 'def', 'ghi'])

  tabnew
  call padre#buffer#LoadBufferName('Test_Buffer_Terminal')
  AssertEqual bufnr('%'), padre#buffer#GetBufNumForBufName('Test_Buffer_Terminal')

  execute 'normal 1GItest'
  AssertEqual ['abc', 'def', 'testghi'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1GAtest'
  AssertEqual ['abc', 'def', 'testghitest'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1GStest'
  AssertEqual ['abc', 'def', 'test'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1Gdd'
  AssertEqual ['abc', 'def', ''], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1Got'
  AssertEqual ['abc', 'def', ''], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1GOt'
  AssertEqual ['abc', 'def', ''], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1Gitest'
  AssertEqual ['abc', 'def', 'test'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2litest'
  AssertEqual ['abc', 'def', 'tetestst'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal dd1Gatest'
  AssertEqual ['abc', 'def', 'test'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2latest'
  AssertEqual ['abc', 'def', 'testestt'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2lCtest'
  AssertEqual ['abc', 'def', 'tetest'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2lD'
  AssertEqual ['abc', 'def', 'te'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2yyp'
  AssertEqual ['abc', 'def', 'te', 'abc', 'def'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1GP'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'def'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2ylp'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'dabef'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1GP'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'abdabef'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1Gxx'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'dabef'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2lX'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'dbef'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2lrx'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'dbxf'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  execute 'normal 1G2lRyz'
  AssertEqual ['abc', 'def', 'te', 'abc', 'abc', 'def', 'dbyz'], padre#buffer#ReadBuffer('Test_Buffer_Terminal')

  quit

Execute (Check we can get the buffer number for a buffer name):
  AssertEqual g:writable_buffer_number, padre#buffer#GetBufNumForBufName('Test_Buffer')

Execute (Check we can create a read only buffer and get the buffer name for a buffer number):
  tabnew
  call padre#buffer#LoadBufferName('Test_Buffer')
  AssertEqual bufnr('%'), padre#buffer#GetBufNumForBufName('Test_Buffer')

  quit

Execute (Check we can add single lines of text to a buffer):
  call padre#buffer#PrependBufferString('Test_Buffer', '1', 'Test ')
  call padre#buffer#AppendBufferString('Test_Buffer', '1', 'test')
  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1'])
  call padre#buffer#AppendBufferList('Test_Buffer', '2', ['Test line 4'])
  call padre#buffer#AppendBufferList('Test_Buffer', '$', ['Test line 5'])
  call padre#buffer#PrependBufferList('Test_Buffer', '$-1', ['Test line 3'])

  split
  execute 'buffer ' . g:writable_buffer_number

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test test'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), 'Test line 4'
  AssertEqual getline(5), 'Test line 5'

  quit

Execute (Check we can read a buffer):
  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1'])
  call padre#buffer#PrependBufferList('Test_Buffer', '2', ['Test line 2'])
  call padre#buffer#PrependBufferList('Test_Buffer', '3', ['Test line 3'])

  AssertEqual ['Test line 1', 'Test line 2', 'Test line 3', ''], padre#buffer#ReadBuffer('Test_Buffer')

Execute (Check we can read a buffer):
  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1'])
  call padre#buffer#PrependBufferList('Test_Buffer', '2', ['Test line 2'])
  call padre#buffer#PrependBufferList('Test_Buffer', '3', ['Test line 3'])
  normal Gdd

  AssertEqual 'Test line 2', padre#buffer#ReadBuffer('Test_Buffer')[1]
  AssertEqual 'Test line 3', padre#buffer#ReadBuffer('Test_Buffer')[2]

Execute (Check we can add multiple lines to a buffer):
  split
  execute 'buffer ' . g:writable_buffer_number

  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1', 'Test line 2', 'Test line 3'])

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test line 2'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), ''

  call padre#buffer#ReplaceBufferList('Test_Buffer', '1', '3', ['TEST LINE 1', 'TEST LINE 2', 'TEST LINE 3'])

  AssertEqual getline(1), 'TEST LINE 1'
  AssertEqual getline(2), 'TEST LINE 2'
  AssertEqual getline(3), 'TEST LINE 3'
  AssertEqual getline(4), ''

  quit

Execute (Check we can still edit a non-modifiable buffer):
  split
  execute 'buffer ' . g:writable_buffer_number

  set nomodifiable

  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1', 'Test line 2', 'Test line 3'])

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test line 2'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), ''

  AssertEqual &modifiable, 0

  quit

Execute (Check we can clear a buffer):
  split
  execute 'buffer ' . g:writable_buffer_number

  " Apparently Vader needs this when run from terminal
  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1', 'Test line 2', 'Test line 3'])

  AssertEqual line('$'), 4

  quit

  call padre#buffer#ClearBuffer('Test_Buffer')

  split
  execute 'buffer ' . g:writable_buffer_number

  AssertEqual line('$'), 1
  AssertEqual getline(1), ''

  quit
