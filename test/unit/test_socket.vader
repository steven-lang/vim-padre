" vim: et ts=2 sts=2 sw=2

Before:
  call padre#python#Setup()

After:
  Restore

Execute (Check we can connect to a socket to send and receive data and close the socket):
  let t:port = has('python3') ? py3eval('padre_api.get_unused_localhost_port()') : pyeval('padre_api.get_unused_localhost_port()')
  call padre#job#Start('test/pythonx/echo_server.py --port=' . t:port, {})

  call padre#socket#Connect('localhost', t:port)

  sleep 3

  call padre#socket#Send('test echo server')
  sleep 100ms
  AssertEqual padre#socket#Received(), 'test echo server'

  call padre#socket#Send('quit')

  call padre#socket#Close()

  sleep 100ms

  AssertEqual 'closed', padre#socket#Status()

Execute (Check we can connect to a socket that opens after a short sleep):
  let t:port = has('python3') ? py3eval('padre_api.get_unused_localhost_port()') : pyeval('padre_api.get_unused_localhost_port()')
  call padre#job#Start('test/pythonx/echo_server.py --init_sleep 1 --port=' . t:port, {})

  sleep 2

  call padre#socket#Connect('localhost', t:port)

  sleep 2

  call padre#socket#Send('test echo server')
  sleep 100ms
  AssertEqual padre#socket#Received(), 'test echo server'

  call padre#socket#Send('quit')

  call padre#socket#Close()

Execute (Check we can send to a socket with a different callback):
  let t:port = has('python3') ? py3eval('padre_api.get_unused_localhost_port()') : pyeval('padre_api.get_unused_localhost_port()')
  call padre#job#Start('test/pythonx/echo_server.py --port=' . t:port, {})

  call padre#socket#Connect('localhost', t:port)

  sleep 3

  let t:CallbackCalled = 0

  function! g:EchoServerCallbackTest(channel, msg)
    AssertEqual a:msg, 'test echo server'
    let t:CallbackCalled = 1
  endfunction

  call padre#socket#Send('test echo server', function('g:EchoServerCallbackTest'))

  sleep 2

  AssertEqual 1, t:CallbackCalled
