" vim: et ts=2 sts=2 sw=2

Before:
  execute 'sign unplace *'

  tabnew
  edit test_file
  setlocal noswapfile
  setlocal buftype=nofile
  setlocal nobuflisted
  setlocal modifiable

  execute "normal! 2iabc\<cr>def\<cr>123\<cr>\<esc>"

  call padre#signs#Setup()

After:
  Restore

  quit

Execute (We can set a breakpoint and get it's file and line number):
  call cursor(2,1)
  let t:BreakpointExpected = {'file': expand('%:p:h') . '/test_file', 'line': '2'}
  sleep 2
  AssertEqual t:BreakpointExpected, padre#signs#ToggleBreakpoint()

Then:
  AssertEqual [t:BreakpointExpected], padre#signs#GetAllBreakpointSignsForFile(expand('%:p:h') . '/test_file')

Execute (We can set a breakpoint and get it's file and line number):
  call cursor(2,1)
  let t:Filename = expand('%:p:h') . '/test_file'
  AssertEqual {'file': t:Filename, 'line': '2'}, padre#signs#ToggleBreakpoint()
  normal j
  AssertEqual {'file': t:Filename, 'line': '3'}, padre#signs#ToggleBreakpoint()
  normal j
  AssertEqual {'file': t:Filename, 'line': '4'}, padre#signs#ToggleBreakpoint()

  AssertEqual [{'file': t:Filename, 'line': '2'}, {'file': t:Filename, 'line': '3'}, {'file': t:Filename, 'line': '4'}], padre#signs#GetAllBreakpointSignsForFile(expand('%:p'))

  normal k
  AssertEqual {}, padre#signs#ToggleBreakpoint()

  AssertEqual [{'file': t:Filename, 'line': '2'}, {'file': t:Filename, 'line': '4'}], padre#signs#GetAllBreakpointSignsForFile(expand('%:p'))

  AssertEqual {'file': t:Filename, 'line': '3'}, padre#signs#ToggleBreakpoint()

Then:
  AssertEqual [{'file': t:Filename, 'line': '2'}, {'file': t:Filename, 'line': '3'}, {'file': t:Filename, 'line': '4'}], padre#signs#GetAllBreakpointSignsForFile(expand('%:p'))

Execute (We can set a breakpoint in separate files):
  call cursor(2,1)
  AssertEqual {'file': expand('%:p:h') . '/test_file', 'line': '2'}, padre#signs#ToggleBreakpoint()

  tabnew
  edit test/test_file_2
  setlocal noswapfile
  setlocal buftype=nofile
  setlocal nobuflisted
  setlocal modifiable

  execute "normal! iabc\<cr>def\<cr>123\<cr>\<esc>"

  call cursor(3,1)
  AssertEqual {'file': expand('%:p:h') . '/test_file_2', 'line': '3'}, padre#signs#ToggleBreakpoint()

  AssertEqual [{'file': expand('%:p:h') . '/test_file', 'line': '2'}, {'file': expand('%:p:h') . '/test/test_file_2', 'line': '3'},], padre#signs#GetAllBreakpointSigns()

  quit

Execute (We can add a code pointer to a file):
  function! g:GetCurrentPointer()
    " Wish I didn't have to expand the buffer name below like I seem to have
    " to :(
    redir => l:signs
      silent execute 'sign place'
    redir end

    for l:line in split(l:signs, '\n')
      let l:match = matchlist(l:line, 'Signs for \(\S\+\):$')
      if len(l:match) != 0
        let l:filename = l:match[1]
        if l:filename[0] != '/'
          let l:filename = expand('%:p:h') . '/' . l:filename
        endif
      endif
      let l:match = matchlist(l:line, '^    line=\(\d\+\) * id=\(\d\+\) * name=PadreDebugPointer$')
      if len(l:match) != 0
        return {'file': l:filename, 'line': match[1]}
      endif
    endfor

    return {}
  endfunction

  AssertEqual {}, g:GetCurrentPointer()

  call padre#signs#ReplaceCodePointer(2)

  AssertEqual {'file': expand('%:p:h') . '/test_file', 'line': '2'}, g:GetCurrentPointer()

  tabnew
  edit test_file_2
  setlocal noswapfile
  setlocal buftype=nofile
  setlocal nobuflisted
  setlocal modifiable

  execute "normal! iabc\<cr>def\<cr>123\<cr>\<esc>"

  call padre#signs#ReplaceCodePointer(3)

  AssertEqual {'file': expand('%:p:h') . '/test_file_2', 'line': '3'}, g:GetCurrentPointer()

  quit

  call padre#signs#ReplaceCodePointer(0)

  AssertEqual {}, g:GetCurrentPointer()
