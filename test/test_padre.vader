" vim: et ts=2 sts=2 sw=2

Before:
  call padre#Enable()

After:
  Restore

Execute (Check padre tab and buffer):
  let g:start_tabpagenr = tabpagenr()

  PadreDebug

Then:
  let t:padre_buf_num = bufnr('%')

  " Check Padre buffer exists
  AssertEqual 'PADRE', padre#buffer#GetBufNameForBufNum(t:padre_buf_num)

  " Check we have a new tab and it's the PADRE buffer
  AssertEqual g:start_tabpagenr + 1, tabpagenr()
  AssertEqual 0, getbufvar(t:padre_buf_num, '&swapfile')
  AssertEqual 'PADRE', getbufvar(t:padre_buf_num, '&filetype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&modifiable')
  AssertEqual 'nofile', getbufvar(t:padre_buf_num, '&buftype')
  AssertEqual 0, getbufvar(t:padre_buf_num, '&buflisted')

  unlet t:padre_buf_num

Execute (Check padre opens and we connect to it):
  PadreDebug

  sleep 100ms

Then:
  AssertEqual 1, padre#job#RunningJobs()

Execute (Check when we run two commands only one is spawned and same tab is open and clear):
  PadreDebug
  PadreDebug
  sleep 1

Then:
  AssertEqual 1, padre#job#RunningJobs()
  AssertEqual 1, len(padre#layout#GetTabNumbersContainingBufferName('PADRE'))

Execute (Check when we run two commands only one is spawned and same tab is open and clear):
  1 tabnext
  PadreDebug

Then:
  AssertEqual padre#layout#GetTabNumbersContainingBufferName('PADRE')[0], tabpagenr()

Execute (Check when we run padre followed by the stop command we have no tab or padre process running):
  PadreDebug
  PadreStop
  sleep 1

Then:
  AssertEqual 0, padre#job#RunningJobs()
  AssertEqual 0, len(padre#layout#GetTabNumbersContainingBufferName('PADRE'))
