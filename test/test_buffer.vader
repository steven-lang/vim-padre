" vim: et ts=2 sts=2 sw=2

Before:
  call padre#Enable()

  let t:options = ['noswapfile', 'buftype=nofile', 'filetype=TestBuf', 'nobuflisted']
  let g:buffer_number = padre#buffer#Create('Test_Buffer', t:options)

  tabnew
  execute 'buffer ' . g:buffer_number

After:
  quit

  Restore

Execute (Check we can create a buffer and get the buffer name for a buffer number):
  redir => t:buffers
    silent exec 'buffers!'
  redir end

  let t:line = split(t:buffers, '\n')[ g:buffer_number - 1 ]
  let t:match = matchlist(t:line, '^ *\([0-9]*\).*"Test_Buffer".*')

  AssertEqual empty(t:match), 0
  AssertEqual 'Test_Buffer', padre#buffer#GetBufNameForBufNum(t:match[1])

Execute (Check we can get the buffer number for a buffer name):
  AssertEqual g:buffer_number, padre#buffer#GetBufNumForBufName("Test_Buffer")

Execute (Check we can add single lines of text to a buffer):
  call padre#buffer#PrependBufferString('Test_Buffer', '1', 'Test ')
  call padre#buffer#AppendBufferString('Test_Buffer', '1', 'test')
  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1'])
  call padre#buffer#AppendBufferList('Test_Buffer', '2', ['Test line 4'])
  call padre#buffer#AppendBufferList('Test_Buffer', '$', ['Test line 5'])
  call padre#buffer#PrependBufferList('Test_Buffer', '$-1', ['Test line 3'])

  split
  execute 'buffer ' . g:buffer_number

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test test'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), 'Test line 4'
  AssertEqual getline(5), 'Test line 5'

  quit

Execute (Check we can add multiple lines to a buffer):
  split
  execute 'buffer ' . g:buffer_number

  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1', 'Test line 2', 'Test line 3'])

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test line 2'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), ''

  call padre#buffer#ReplaceBufferList('Test_Buffer', '1', '3', ['TEST LINE 1', 'TEST LINE 2', 'TEST LINE 3'])

  AssertEqual getline(1), 'TEST LINE 1'
  AssertEqual getline(2), 'TEST LINE 2'
  AssertEqual getline(3), 'TEST LINE 3'
  AssertEqual getline(4), ''

  quit

Execute (Check we can still edit a non-modifiable buffer):
  split
  execute 'buffer ' . g:buffer_number

  set nomodifiable

  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1', 'Test line 2', 'Test line 3'])

  AssertEqual getline(1), 'Test line 1'
  AssertEqual getline(2), 'Test line 2'
  AssertEqual getline(3), 'Test line 3'
  AssertEqual getline(4), ''

  AssertEqual &modifiable, 0

  quit

Execute (Check we can clear a buffer):
  split
  execute 'buffer ' . g:buffer_number

  " Apparently Vader needs this when run from terminal
  call padre#buffer#PrependBufferList('Test_Buffer', '1', ['Test line 1', 'Test line 2', 'Test line 3'])

  AssertEqual line('$'), 4

  quit

  call padre#buffer#ClearBuffer('Test_Buffer')

  split
  execute 'buffer ' . g:buffer_number

  AssertEqual line('$'), 1
  AssertEqual getline(1), ''

  quit
